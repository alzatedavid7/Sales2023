@page "/categories/edit/{Id:int}"
@inject NavigationManager navigationManager
@inject IRepository repository
@inject SweetAlertService sweetAlertService

<h3>Editar Categoria</h3>

@if (category is null)
{
    <p>Cargando...</p>
}
else
{
    <CategoryForm @ref="categoryForm" Category="category" OnValidSubmit="EditAsync" ReturnAction="Return" />
}

@code {
    private Category? category;
    private CategoryForm? categoryForm;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var responseHTTP = await repository.Get<Category>($"api/categories/{Id}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("categories");
                return;
            }

            var message = await responseHTTP.GetErrorMessage();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;

        }

        category = responseHTTP.Response;

    }

    private async Task EditAsync()
    {
        var responseHTTP = await repository.Put("api/categories", category);

        if (responseHTTP.Error)
        {
            var message = await responseHTTP.GetErrorMessage();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        Return();

    }

    private void Return()
    {
        categoryForm!.FormPostedSuccessfully = true;
        navigationManager.NavigateTo("categories");

    }
}

